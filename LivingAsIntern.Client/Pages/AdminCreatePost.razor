@page "/createpost"
@using LivingAsIntern.Client.Layout
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>


<AuthorizeView>
    <Authorized>
        <div class="page">
            <div>
                <NavBarAdmin />
            </div>
            <br />
            <br />
            <br />

            <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
                <symbol id="check-circle-fill" viewBox="0 0 16 16">
                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"></path>
                </symbol>
                <symbol id="info-fill" viewBox="0 0 16 16">
                    <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"></path>
                </symbol>
                <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path>
                </symbol>
            </svg>

            <div class="mb-3">
                <label for="exampleFormControlInput1" class="form-label">Title</label>
                <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="Routine as Intern: {Title}" @bind="title">
            </div>

            <div class="mb-3">
                <label for="exampleFormControlInput1" class="form-label">Tags</label>
                <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="Use a comma (,) to separate the strings." @bind="tagsInString">
            </div>

            <button style="border-radius:5px; margin-bottom:10px" @onclick="Post_OnClick">Post</button>

            @if (statusSuccess)
            {
                <div class="alert alert-success d-flex align-items-center" role="alert">
                    <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Success:" style="width: 25px; height: 25px;"><use xlink:href="#check-circle-fill" /></svg>
                    <div>
                        Post Created Sucessfully
                    </div>
                </div>
            }
            else if (statusError)
            {
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Danger:" style="width: 25px; height: 25px;"><use xlink:href="#exclamation-triangle-fill" /></svg>
                    <div>
                        Error to Create a Post: @errorMessage
                    </div>
                </div>
            }

            <main class="content px-4" style="background-color:white; border-radius:5px;">

                <div class="col-md-12" style="color:black; height:100vh; overflow:auto">
                    <MarkdownEditor @bind-Value="@markdownValue"
                                    ValueHTMLChanged="@OnMarkdownValueHTMLChanged" />

                    <hr />

                    <h3>Result</h3>
                    @((MarkupString)markdownHtml)
                </div>

            </main>

        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this page. Redirecting to login...</p>
    </NotAuthorized>
</AuthorizeView>



@code {
    string markdownValue = "#Markdown Editor\nThis is a test";
    string markdownHtml;
    string title;
    static string tagsInString = "Default Tag,LonfTonf Tag";
    string[] tags = tagsInString.Split(",");

    bool statusSuccess = false;
    bool statusError = false;
    string errorMessage = string.Empty;

    private HttpClient HttpClient { get; set; } = new HttpClient();
    private string url = ("https://localhost:7250/api/post/");

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        return Task.CompletedTask;
    }

    public async Task Post_OnClick()
    {
        Post post = new Post()
        {
            Title = title,
            Tags = tags,
            CreatedAt = DateTime.Now,
            textHTML = markdownHtml,
            textMarkDown = markdownValue
        };

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (token != null)
            {
                HttpClient.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await HttpClient.PostAsJsonAsync(url + "admin/createpost", post);

            if (response.IsSuccessStatusCode)
            {
                title = string.Empty;
                tags = [" ", " "];
                markdownValue = "#Markdown Editor\nThis is a test";

                await setDelayStatusSuccess(2000);
            }
            else
            {
                errorMessage = "Error - CODE:" + response.StatusCode;
                await setDelayStatusError(4000);
            }
        }
        catch (Exception e)
        {
            errorMessage = "Exception:" + e.ToString();
            await setDelayStatusError(6000);
        }
    }

    private async Task setDelayStatusSuccess(int Delay)
    {
        statusSuccess = true;
        StateHasChanged();
        await Task.Delay(Delay);
        statusSuccess = false;
        StateHasChanged();
    }

    private async Task setDelayStatusError(int Delay)
    {
        statusError = true;
        StateHasChanged();
        await Task.Delay(Delay);
        StateHasChanged();
        statusError = false;
    }

    private class Post
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string[] Tags { get; set; }
        public DateTime CreatedAt { get; set; }
        public string textHTML { get; set; }
        public string textMarkDown { get; set; }
    }
 }

